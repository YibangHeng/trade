syntax = "proto3";

package trade.types;

import "google/protobuf/timestamp.proto";

import "enums.proto";

message Symbol
{
    string symbol              = 1; /// 合约代码
    string symbol_name         = 2; /// 合约名称
    ExchangeType exchange      = 3; /// 交易所
    optional string underlying = 4; /// 基础合约
}

message Symbols
{
    repeated Symbol symbols = 1;
}

message Fund
{
    string account_id                     = 1; /// 资金账户
    double available_fund                 = 2; /// 可用资金
    double withdrawn_fund                 = 3; /// 可取资金
    double frozen_fund                    = 4; /// 冻结资金
    double frozen_margin                  = 5; /// 冻结保证金
    double frozen_commission              = 6; /// 冻结手续费
    google.protobuf.Timestamp update_time = 7; /// 更新时间
}

message Funds
{
    repeated Fund funds = 1;
}

message Position
{
    string symbol                         = 1;  /// 合约代码
    int64 yesterday_position              = 2;  /// 上日持仓
    int64 today_position                  = 3;  /// 今日持仓
    optional int64 open_volume            = 4;  /// 开仓量
    optional int64 close_volume           = 5;  /// 平仓量
    optional double position_cost         = 6;  /// 持仓成本
    optional double pre_margin            = 7;  /// 上次占用的保证金
    optional double used_margin           = 8;  /// 占用的保证金
    optional double frozen_margin         = 9;  /// 可用保证金
    optional double open_cost             = 10; /// 开仓成本
    google.protobuf.Timestamp update_time = 11; /// 更新时间
}

message Positions
{
    repeated Position positions = 1;
}

message Order
{
    int64 unique_id                         = 1;  /// 唯一 ID
    optional string broker_id               = 2;  /// 券商 ID
    optional string exchange_id             = 3;  /// 交易所 ID
    string symbol                           = 4;  /// 合约代码
    SideType side                           = 5;  /// 买卖方向
    optional PositionSideType position_side = 6;  /// 开平方向
    double price                            = 7;  /// 价格
    int64 quantity                          = 8;  /// 数量
    google.protobuf.Timestamp creation_time = 9;  /// 创建时间
    google.protobuf.Timestamp update_time   = 10; /// 更新时间
}

message Orders
{
    repeated Order orders = 1;
}

///
/// 行情信息
///

/// 逐笔委托信息
message OrderTick
{
    int64 unique_id                        = 1;   /// 委托 UniqueID
    OrderType order_type                   = 2;   /// 委托类型
    string symbol                          = 3;   /// 合约代码
    SideType side                          = 4;   /// 买卖方向
    double price                           = 5;   /// 价格
    int64 quantity                         = 6;   /// 数量
    int64 exchange_time                    = 7;   /// 交易所时间（HHMMSSmmm）
    optional int64 x_ost_sse_ask_unique_id = 100; /// 上交所卖方委托 UniqueID
    optional int64 x_ost_sse_bid_unique_id = 101; /// 上交所买方委托 UniqueID
}

/// 逐笔成交信息
message TradeTick
{
    int64 ask_unique_id                    = 1;   /// 卖方委托 UniqueID
    int64 bid_unique_id                    = 2;   /// 买方委托 UniqueID
    string symbol                          = 3;   /// 合约代码
    double exec_price                      = 4;   /// 执行价格
    int64 exec_quantity                    = 5;   /// 执行数量
    int64 exchange_time                    = 6;   /// 交易所时间（HHMMSSmmm）
    optional OrderType x_ost_szse_exe_type = 100; /// 深交所成交类型（仅区分成交/撤单）
}

/// L2 行情信息（逐笔成交）
message L2Tick
{
    string symbol                           = 1; /// 合约代码
    double price                            = 2; /// 价格
    int64 quantity                          = 3; /// 当笔数量
    int64 ask_unique_id                     = 4; /// 卖方委托 UniqueID
    int64 bid_unique_id                     = 5; /// 买方委托 UniqueID
    google.protobuf.Timestamp exchange_time = 6; /// 交易所时间（HHMMSSmmm）

    optional double sell_price_10           = 1110; /// 卖 10
    optional int64 sell_quantity_10         = 1210; /// 卖 10
    optional double sell_price_9            = 1109; /// 卖 9
    optional int64 sell_quantity_9          = 1209; /// 卖 9
    optional double sell_price_8            = 1108; /// 卖 8
    optional int64 sell_quantity_8          = 1208; /// 卖 8
    optional double sell_price_7            = 1107; /// 卖 7
    optional int64 sell_quantity_7          = 1207; /// 卖 7
    optional double sell_price_6            = 1106; /// 卖 6
    optional int64 sell_quantity_6          = 1206; /// 卖 6
    optional double sell_price_5            = 1105; /// 卖 5
    optional int64 sell_quantity_5          = 1205; /// 卖 5
    optional double sell_price_4            = 1104; /// 卖 4
    optional int64 sell_quantity_4          = 1204; /// 卖 4
    optional double sell_price_3            = 1103; /// 卖 3
    optional int64 sell_quantity_3          = 1203; /// 卖 3
    optional double sell_price_2            = 1102; /// 卖 2
    optional int64 sell_quantity_2          = 1202; /// 卖 2
    optional double sell_price_1            = 1101; /// 卖 1
    optional int64 sell_quantity_1          = 1201; /// 卖 1
    optional double buy_price_1             = 2101; /// 买 1
    optional int64 buy_quantity_1           = 2201; /// 买 1
    optional double buy_price_2             = 2102; /// 买 2
    optional int64 buy_quantity_2           = 2202; /// 买 2
    optional double buy_price_3             = 2103; /// 买 3
    optional int64 buy_quantity_3           = 2203; /// 买 3
    optional double buy_price_4             = 2104; /// 买 4
    optional int64 buy_quantity_4           = 2204; /// 买 4
    optional double buy_price_5             = 2105; /// 买 5
    optional int64 buy_quantity_5           = 2205; /// 买 5
    optional double buy_price_6             = 2106; /// 买 6
    optional int64 buy_quantity_6           = 2206; /// 买 6
    optional double buy_price_7             = 2107; /// 买 7
    optional int64 buy_quantity_7           = 2207; /// 买 7
    optional double buy_price_8             = 2108; /// 买 8
    optional int64 buy_quantity_8           = 2208; /// 买 8
    optional double buy_price_9             = 2109; /// 买 9
    optional int64 buy_quantity_9           = 2209; /// 买 9
    optional double buy_price_10            = 2110; /// 买 10
    optional int64 buy_quantity_10          = 2210; /// 买 10
}
